import React, { useState, useEffect } from "react"; import { Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button, FormControl, InputLabel, Select, MenuItem, Box, Switch, FormControlLabel, Typography } from "@mui/material"; import { toast } from "react-hot-toast"; import api from "../axiosConfig"; const UserForm = ({ open, onClose, user = null, onSuccess }) => { const [formData, setFormData] = useState({ name: "", email: "", password: "", role: "patient", phone: "", specialization: "", department: "", isActive: true }); const [loading, setLoading] = useState(false); const [errors, setErrors] = useState({}); const isEdit = !!user; useEffect(() => { if (user) { setFormData({ name: user.name || "", email: user.email || "", password: "", role: user.role || "patient", phone: user.phone || "", specialization: user.specialization || "", department: user.department || "", isActive: user.isActive !== undefined ? user.isActive : true }); } else { setFormData({ name: "", email: "", password: "", role: "patient", phone: "", specialization: "", department: "", isActive: true }); } setErrors({}); }, [user, open]); const validateForm = () => { const newErrors = {}; if (!formData.name.trim()) newErrors.name = "姓名不能为空"; if (!formData.email.trim()) newErrors.email = "邮箱不能为空"; else if (!/\S+@\S+\.\S+/.test(formData.email)) newErrors.email = "邮箱格式不正确"; if (!isEdit && !formData.password.trim()) newErrors.password = "密码不能为空"; else if (!isEdit && formData.password.length < 6) newErrors.password = "密码至少6位"; if (!formData.role) newErrors.role = "请选择角色"; if (formData.role === "doctor") { if (!formData.specialization.trim()) newErrors.specialization = "专业不能为空"; if (!formData.department.trim()) newErrors.department = "科室不能为空"; } setErrors(newErrors); return Object.keys(newErrors).length === 0; }; const handleSubmit = async () => { if (!validateForm()) return; setLoading(true); try { const submitData = { ...formData }; if (isEdit && !submitData.password) delete submitData.password; if (isEdit) { await api.put(`/admin/users/${user._id}`, submitData); toast.success("用户信息更新成功"); } else { await api.post("/admin/users", submitData); toast.success("用户创建成功"); } onSuccess(); onClose(); } catch (error) { console.error("保存用户失败:", error); const errorMessage = error.response?.data?.message || "操作失败"; toast.error(errorMessage); } finally { setLoading(false); } }; const handleChange = (field) => (event) => { const value = event.target.type === "checkbox" ? event.target.checked : event.target.value; setFormData(prev => ({ ...prev, [field]: value })); if (errors[field]) setErrors(prev => ({ ...prev, [field]: "" })); }; return ( <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth> <DialogTitle>{isEdit ? "编辑用户" : "添加用户"}</DialogTitle> <DialogContent> <Box sx={{ pt: 1 }}> <TextField fullWidth label="姓名" value={formData.name} onChange={handleChange("name")} error={!!errors.name} helperText={errors.name} margin="normal" required /> <TextField fullWidth label="邮箱" type="email" value={formData.email} onChange={handleChange("email")} error={!!errors.email} helperText={errors.email} margin="normal" required /> <TextField fullWidth label="密码" type="password" value={formData.password} onChange={handleChange("password")} error={!!errors.password} helperText={errors.password || (isEdit ? "留空则不修改密码" : "")} margin="normal" required={!isEdit} /> <FormControl fullWidth margin="normal" error={!!errors.role}> <InputLabel>角色</InputLabel> <Select value={formData.role} label="角色" onChange={handleChange("role")}> <MenuItem value="patient">患者</MenuItem> <MenuItem value="doctor">医生</MenuItem> <MenuItem value="admin">管理员</MenuItem> </Select> {errors.role && ( <Typography variant="caption" color="error" sx={{ mt: 0.5, display: "block" }}> {errors.role} </Typography> )} </FormControl> <TextField fullWidth label="手机号" value={formData.phone} onChange={handleChange("phone")} margin="normal" /> {formData.role === "doctor" && ( <> <TextField fullWidth label="专业" value={formData.specialization} onChange={handleChange("specialization")} error={!!errors.specialization} helperText={errors.specialization} margin="normal" required /> <TextField fullWidth label="科室" value={formData.department} onChange={handleChange("department")} error={!!errors.department} helperText={errors.department} margin="normal" required /> </> )} <FormControlLabel control={<Switch checked={formData.isActive} onChange={handleChange("isActive")} />} label="启用账户" sx={{ mt: 2 }} /> </Box> </DialogContent> <DialogActions> <Button onClick={onClose} disabled={loading}>取消</Button> <Button onClick={handleSubmit} variant="contained" disabled={loading}> {loading ? "保存中..." : (isEdit ? "更新" : "创建")} </Button> </DialogActions> </Dialog> ); }; export default UserForm;
